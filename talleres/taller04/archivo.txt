import java.util.*;

/**
 * Clase en la cual se implementan los metodos del Taller de Clase #4
 * 
 * @author Mauricio Toro, Mateo Agudelo
 */
public class Taller4 {

	/*public static int recorrido(Digraph g) {
		// complete...
	}

	// recomendacion
	private static int recorrido(Digraph g, int v, int[] unvisited) {
		// complete...
	}

	// recomendacion
	private static int[] removeAt(int k, int a[]) {
		// complete...
	}

	public static int costoMinimo(Digraph g, int inicio, int fin) {
		// complete...
	}

	// recomendacion
	private static void dfs(Digraph g, int v, int[] costo) {
		
	}*/
        
        
           public static ArrayList<Integer> dfsRetornador(Digraph g, int v){
          boolean[] vi = new boolean[g.size()];
          ArrayList<Integer> respuesta = new ArrayList<Integer>();
          dfsRetornador(g, v, respuesta, vi);
          return respuesta;
        }     
      private static void dfsRetornador(Digraph g, int v,ArrayList<Integer> l, boolean[] vi){
              vi[v] = true;
              l.add(v);
              ArrayList<Integer> sucesores = g.getSuccessors(v);
              if (sucesores != null){
              for(Integer sucesor: sucesores){
                  if (!vi[sucesor]) // vi[sucesor] != false
                     dfsRetornador(g,sucesor, l, vi); 
              }}
              return;
        }
         public static ArrayList<Integer> bfsRetornador(Digraph g, int v){
          boolean[] vi = new boolean[g.size()];
           ArrayList<Integer> respuesta = new ArrayList<Integer>();
            bfsRetornador(g, v, respuesta, vi);
          return respuesta;
        }     
      private static void bfsRetornador(Digraph g, int v,ArrayList<Integer> l, boolean[] vi){
                            
               Queue <Integer> q= new LinkedList<Integer>();
                       q.add(v);
              while(!q.isEmpty()){
                              int actual = q.poll();
                               vi[actual] = true; 
                              ArrayList<Integer> sucesores = g.getSuccessors(actual);
                if (sucesores != null){
                   for(Integer sucesor: sucesores){
                  if (!vi[sucesor]) // vi[sucesor] == false
                  q.add(sucesor);
                    
                }
            }
                            
                            }
                          
              return;
        }	
        public static void main(String [] args){
                DigraphAL g = new DigraphAL(4);
                g.addArc(0,1,1);
                 g.addArc(1,3,1);
                   g.addArc(0,2,1);
                    g.addArc(3,0,1);
                System.out.println(bfsRetornador(g,0));
            }
       
}
